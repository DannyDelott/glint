// Glint
// -----
//
// This is our app's main Angular module.

// Our dependencies are by shared services, feature controllers, and third-party modules.
var app = angular.module('glint', [
  'glint.services',
  'glint.ideas',
  'glint.votes',
  'glint.auth',
  'glint.comments',
  'ngAnimate',
  'ngRoute'
  ])

// Routing configuration, determines which view and controller to use
.config(function($routeProvider){
	$routeProvider
		.when('/', {
        templateUrl: 'app/ideas/ideas.html',
        controller: "IdeasCtrl as ictrl"
      })
    .when('/login', {
        templateUrl: 'app/auth/login.html',
        controller: "AuthCtrl as actrl"
      })
    .when('/signup', {
        templateUrl: 'app/auth/signup.html',
        controller: "AuthCtrl as actrl"
      })
<<<<<<< HEAD
    .when('/ideas/:_id', {
=======
    .when('/ideas/:_id/contributors', {
        templateUrl: 'app/ideaDetail/ideaDetail.html',
        controller: "AuthCtrl as actrl"
      })
    .when('/ideas/:_id/comments', {
>>>>>>> Create separate folder for idea detail page
        templateUrl: 'app/ideas/ideaDetail.html',
        controller: "AuthCtrl as actrl"
      })
    .otherwise({
        redirectTo: '/'
      });
})

// Custom filter for applying moment.js to our timestamps.
.filter('moment', function () {
  return function (dateString) {
      return moment(dateString).fromNow();
  };
});
;var glintServices = angular.module('glint.services', []);

glintServices.factory('Ideas', function ($http){

  var getIdeas = function (){
    return $http({
      method: 'GET',
      url: '/api/ideas'
    }).then(function (response){
      return response.data;
    }).catch(function (error) {
      console.error('getIdeas error', error);
    });
  };

  var createIdea = function (idea){
    return $http({
      method: 'POST',
      url: '/api/ideas',
      data: idea
    }).then(function (response){
      return response.data;
    }).catch(function (error) {
      console.error('createIdeas error', error);
    });
  };

  return {
    getIdeas: getIdeas,
    createIdea: createIdea
  };
});

glintServices.factory('Votes', function($http){

  var upvote = function (idea){
    return $http({
      method: 'POST',
      url: '/api/vote/upvote',
      data: idea
    })
    .then(function (response){
      return response.data;
    })
    .catch(function (error) {
      console.error('upvote error', error);
    });
  };

  var downvote = function (idea){
    return $http({
      method: 'POST',
      url: '/api/vote/downvote',
      data: idea
    })
    .then(function (response){
      return response.data;
    })
    .catch(function (error) {
      console.error('downvote error', error);
    });
  };

  return {
    upvote: upvote,
    downvote: downvote
  };
});

glintServices.factory('Auth', function($http, $location){

  var login = function (user){
    return $http({
      method: 'POST',
      url: '/api/users/signin',
      data: user
    })
    .success(function (response){
      $location.url('/#');
    })
    .error(function(response){
      $location.url('/#/login');
    })
    .catch(function (error) {
      console.error('login error', error);
    });  };

  var signup = function (user){
    return $http({
      method: 'POST',
      url: '/api/users/signup',
      data: user
    })
    .success(function (response){
      $location.url('/#');
    })
    .error(function(response){
      $location.url('/#/signup');
    })
    .catch(function (error) {
      console.error('signup error', error);
    });
  };

  return {
    login: login,
    signup: signup
  };
});

glintServices.factory('Comments', function ($http){
  
  var createComment = function (comment){
    return $http({
      method: 'POST',
      url: '/api/comments',
      data: comment
    }).then(function (response){
      return response.data;
    }).catch(function (error) {
      console.error('createComments error', error);
    });

  };

  var getComments = function (idea_id){
    return $http({
      method: 'GET',
      url: '/api/comments',
      data: idea_id
    }).then(function (response){
      return response.data;
    }).catch(function (error) {
      console.error('getComments error', error);
    });
  };

  return {
    createComment: createComment,
    getComments: getComments
  };
});

;// Ideas controller
// ----------------
//

// The pattern we're using here is the pattern we're using across all our controllers: the controllerAs syntax. This syntax is for Angular versions 1.2 and up, and means you don't have to use `$scope` anymore. Instead, inside of your HTML, you declare your controller with `ng-controller="IdeasCtrl as ictrl"` and reference your variables within that controlled scope as `ictrl.<varname>`. Additionally, instead of setting your properties within your controller to `$scope`, assign your controller's `this` to a variable called self and set your properties to that. 
angular.module('glint.ideas', [])
.controller('IdeasCtrl', function (Ideas, $filter){
  var self = this;
  self.data = { ideas: [] };
  self.idea = {};
  self.postSuccess = false;
  self.submitted = false;

  // Display all ideas currently in the database.
  self.displayIdeas = function(){
    Ideas.getIdeas()
      .then(function (results){
        results = $filter('orderBy')(results, 'votes', true);
        self.data.ideas = results;
      })
      .catch(function (error){
        console.error('displayIdeas error', error);
      });
  };

  // Submit a new idea.
  self.submitIdea = function ($timeout){
    console.log('submitting your idea');

    // Show description box.
    if (self.submitted === false){
      self.submitted = true;
    } else {

    // Escape user input.
    self.idea.title = _.escape(self.idea.title);
    self.idea.text = _.escape(self.idea.text);
    var idea = JSON.stringify(self.idea);
    
    // POST new idea, display confirmation, redisplay all ideas.
    Ideas.createIdea(idea)
      .then(function (response){
        // Show user feedback.
        self.postSuccess = true;
        // Hide idea description field.
        self.submitted = false;
        // Clear form fields after submit.
        self.idea = {};
        self.displayIdeas();
      })
      .catch(function (error){
        console.error('createIdea error', error);
      });
    }
  };

  self.displayIdeas();
});
;// Votes controller
// ----------------

angular.module('glint.votes', [])

.controller('VotesCtrl', function(Votes){
  var self = this;

  // Display the user's upvotes and pass them along to the db.
  self.upvote = function(idea){
    var ideaRef = idea;

    idea = JSON.stringify(idea);
    Votes.upvote(idea)
      .then(function (response){
        // Update the specific idea's vote count.
        // TODO: limit votes to one per user
        ideaRef.votes++;
      })
      .catch(function (error){
        console.error('upvote error', error);
      });
  };

  // Display the user's downvotes and pass them along to the db.
  self.downvote = function(idea){
    var ideaRef = idea;

    idea = JSON.stringify(idea);
    Votes.downvote(idea)
      .then(function (response){
        // Update the specific idea's vote count.
        // TODO: limit votes to one per user
        ideaRef.votes--;
      })
      .catch(function (error){
        console.error('downvote error', error);
      });
  };
});
;// Auth controller
// ---------------
//
// This feature is not finished yet. Current target is not to implement actual authorization, but simply to link users to ideas (and eventually comments).

angular.module('glint.auth', [])

.controller('AuthCtrl', function(Auth){
  var self = this;
  self.user = {};

  // Allow user to declare who they are to the system.
  self.login = function() {
    self.user.username = _.escape(self.user.username);
    self.user.password = _.escape(self.user.password);
    var user = JSON.stringify(self.user);

    Auth.login(user)
      .then(function (response){})
      .catch(function (error){
        console.error('login error', error);
      });
  };

  // Allow user to first-time identify themselves to the system.
  self.signup = function() {
    console.log('signing you up');
    self.user.username = _.escape(self.user.username);
    self.user.password = _.escape(self.user.password);
    var user = JSON.stringify(self.user);

    Auth.signup(user)
      .then(function (response){})
      .catch(function (error){
        console.error('signup error', error);
      });
  };
});
;// Comments controller
// -------------------
//
// This feature is still in development, but a good deal of work for it has already been done.

angular.module('glint.comments', [])

.controller('CommentsCtrl', function (Comments){
  var self = this;
  self.comment = {};

  // Submit eventual form inputs to the db and display something back to the user on success.
  self.submitComment = function (idea_id){

    // The comment object needs to be populated with form inputs here.
    // User input will need to be escaped, and stringified. Refer to the comment schema for the fields needed, but likely `self.comment.text`, `self.comment.idea_id`, and `self.comment.created_by` will be necessary.
    comment = JSON.stringify(self.comment);

    Comments.createComment(comment)
      .then(function (response){
        // Display the supplied comment back to the user who submitted it.
      })
      .catch(function (error){
        console.error('comment error', error);
      });
  };

  // Display all comments for a specific idea.
  self.displayComments = function (idea_id){
    Comments.getComments(idea_id)
      .then(function (response){
        // Display this idea's comments.
      })
      .catch(function (error){
        console.error('displayComments error', error);
      });
  };

});
